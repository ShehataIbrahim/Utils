/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.streams.gironil;

import com.streams.BookingCreator;
import com.streams.CorruptedFileException;
import com.streams.EmptyFileException;
import com.streams.FilesListModel;
import com.streams.ListItem;
import com.streams.MissingCompanyCodeException;
import com.streams.SwingUtils;
import com.streams.gironil.persistance.JdbcController;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author Shehata.Ibrahim
 */
public class BookingGenerator extends javax.swing.JFrame {

    /**
     * Creates new form BookingGenerator
     */
    FilesListModel lstModel;
    boolean updatingPaths = false;
    private DefaultListModel lstLogModel;

    public BookingGenerator() {

        lstModel = new FilesListModel();
        lstLogModel = new DefaultListModel();

        initComponents();
        SwingUtils.centerScreen(this);
        Properties props = Configs.loadConfigurations(Configs.CONFIG_FILE_NAME);
        if (props == null) {
            new SetupForm(this, true, true) {
                @Override
                public void onSave() {
                    loadConfigs();
                    startWatching();
                }

                @Override
                public void onDispose() {
                    System.exit(0);
                }
            }.setVisible(true);
        } else {
            txtInputFolder.setText(props.getProperty(Configs.INPUT_FOLDER_KEY));
            txtProcessedFolder.setText(props.getProperty(Configs.PROCESSED_FOLDER_KEY));
            txtOutputFolder.setText(props.getProperty(Configs.OUTPUT_FOLDER_KEY));
            inputFolder = new File(txtInputFolder.getText());
            startWatching();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpRadioButtons = new javax.swing.ButtonGroup();
        pnlContainer = new javax.swing.JScrollPane();
        lstCompanies = new javax.swing.JList();
        btnGenerate = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtInputFolder = new javax.swing.JTextField();
        txtProcessedFolder = new javax.swing.JTextField();
        rbtnSingleFile = new javax.swing.JRadioButton();
        rbtnCombined = new javax.swing.JRadioButton();
        rbtnForSelection = new javax.swing.JRadioButton();
        txtOutputFolder = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstLog = new javax.swing.JList();
        btnClearLog = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuSetup = new javax.swing.JMenuItem();
        mnuDBSetup = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Booking File Generator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lstCompanies.setModel(lstModel);
        pnlContainer.setViewportView(lstCompanies);

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel4.setText("Input Folder");

        jLabel5.setText("Processed Folder");

        txtInputFolder.setEditable(false);

        txtProcessedFolder.setEditable(false);

        grpRadioButtons.add(rbtnSingleFile);
        rbtnSingleFile.setSelected(true);
        rbtnSingleFile.setText("Booking per file");

        grpRadioButtons.add(rbtnCombined);
        rbtnCombined.setText("Combined file for all");

        grpRadioButtons.add(rbtnForSelection);
        rbtnForSelection.setText("Combined for selections");

        txtOutputFolder.setEditable(false);

        jLabel2.setText("Output Folder");

        lstLog.setModel(lstLogModel);
        jScrollPane1.setViewportView(lstLog);

        btnClearLog.setText("Clear Log");
        btnClearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearLogActionPerformed(evt);
            }
        });

        mnuFile.setText("File");

        mnuSetup.setText("Setup Paths");
        mnuSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSetupActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSetup);

        mnuDBSetup.setText("Setup Database ");
        mnuDBSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDBSetupActionPerformed(evt);
            }
        });
        mnuFile.add(mnuDBSetup);

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        jMenuBar1.add(mnuFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtInputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExit)
                        .addGap(104, 104, 104)
                        .addComponent(btnClearLog, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtnForSelection)
                            .addComponent(rbtnSingleFile, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnCombined, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtOutputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtProcessedFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtInputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtProcessedFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOutputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbtnSingleFile)
                        .addGap(18, 18, 18)
                        .addComponent(rbtnCombined)
                        .addGap(18, 18, 18)
                        .addComponent(rbtnForSelection)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnExit)
                        .addComponent(btnGenerate))
                    .addComponent(btnClearLog))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        close();
    }//GEN-LAST:event_mnuExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //evt.
        close();
    }//GEN-LAST:event_formWindowClosing
    private void addLogItem(String log) {
        lstLogModel.addElement(log);
        lstLog.ensureIndexIsVisible(lstLogModel.getSize() - 1);
    }
    private void mnuSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSetupActionPerformed
        updatingPaths = true;
        new SetupForm(this, true) {
            @Override
            public void onSave() {
                loadConfigs();
                updatingPaths = false;
                addLogItem("Configurations was saved");
            }

            @Override
            public void onDispose() {
                updatingPaths = false;
            }
        }.setVisible(true);
    }//GEN-LAST:event_mnuSetupActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        close();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        new Thread() {
            @Override
            public void run() {

                switchComponentsStatus(false);
                ArrayList<File> filesList = new ArrayList<File>();
                for (int i = 0; i < lstModel.getSize(); i++) {
                    ListItem item = (ListItem) lstModel.get(i);
                    filesList.add(item.getFile());
                }
                if (rbtnSingleFile.isSelected()) {

                    for (File f : filesList) {
                        try {
                            String result = BookingCreator.generateBookingForFile(f, txtProcessedFolder.getText(), txtOutputFolder.getText());
                            addLogItem(result);//+" waiting for Transactions db insertion");
                        } catch (CorruptedFileException ex) {
                            addLogItem(f.getName() + " Error at line:" + ex.getCorruptedTransaction() + " " + ex.getCorruptionCause());
                        } catch (EmptyFileException ex) {
                            addLogItem(f.getName() + " File is empty");
                        } catch (IOException ex) {
                            addLogItem(f.getName() + " Error: " + ex.getMessage());
                        } catch (MissingCompanyCodeException ex) {
                            addLogItem("Company Info is missing for Code " + ex.getCode());
                        }
                    }
                } else if (rbtnCombined.isSelected()) {
                    try {
                        String result = BookingCreator.generateBookingForMultipleFiles(filesList, txtProcessedFolder.getText(), txtOutputFolder.getText());
                        addLogItem(result);//+" waiting for Transactions db insertion");
                    } catch (CorruptedFileException ex) {
                        addLogItem("Error at one of Files line:" + ex.getCorruptedTransaction() + " " + ex.getCorruptionCause());
                    } catch (EmptyFileException ex) {
                        addLogItem("Error at one of Files: File is empty");
                    } catch (IOException ex) {
                        addLogItem("Error at one of Files: " + ex.getMessage());
                    } catch (MissingCompanyCodeException ex) {
                        addLogItem("Company Info is missing for Code " + ex.getCode());
                    }
                } else if (rbtnForSelection.isSelected()) {
                    Object[] selectedItems = lstCompanies.getSelectedValues();
                    ArrayList<File> selectedFiles = new ArrayList<File>();
                    for (Object it : selectedItems) {
                        selectedFiles.add(((ListItem) it).getFile());
                        filesList.remove(((ListItem) it).getFile());
                    }

                    try {
                        String result = BookingCreator.generateBookingForMultipleFiles(selectedFiles, txtProcessedFolder.getText(), txtOutputFolder.getText());
                        addLogItem(result); //+" waiting for Transactions db insertion");
                    } catch (CorruptedFileException ex) {
                        addLogItem("Error at one of Selected Files line:" + ex.getCorruptedTransaction() + " " + ex.getCorruptionCause());
                    } catch (EmptyFileException ex) {
                        addLogItem("Error at one of Selected Files: File is empty");
                    } catch (IOException ex) {
                        addLogItem("Error at one of Selected Files: " + ex.getMessage());
                    } catch (MissingCompanyCodeException ex) {
                        addLogItem("Company Info is missing for Code " + ex.getCode());
                    }
                    for (File f : filesList) {
                        try {
                            String result = BookingCreator.generateBookingForFile(f, txtProcessedFolder.getText(), txtOutputFolder.getText());
                            addLogItem(result);
                        } catch (CorruptedFileException ex) {
                            addLogItem(f.getName() + " Error at line:" + ex.getCorruptedTransaction() + " " + ex.getCorruptionCause());
                        } catch (EmptyFileException ex) {
                            addLogItem(f.getName() + " File is empty");
                        } catch (IOException ex) {
                            addLogItem(f.getName() + " Error: " + ex.getMessage());
                        } catch (MissingCompanyCodeException ex) {
                            addLogItem("Company Info is missing for Code " + ex.getCode());
                        }
                    }
                }
                /*     while(!BookingCreator.runningThreads.isEmpty())
                 {
                 try {
                 sleep(1000);
                 } catch (InterruptedException ex) {
                 ex.printStackTrace();
                 }
                 }
                 addLogItem("DB logs are inserted");*/
                switchComponentsStatus(true);
                JdbcController.closeConnection();
            }
        }.start();
    }//GEN-LAST:event_btnGenerateActionPerformed
    public void switchComponentsStatus(boolean newStatus) {
        btnGenerate.setEnabled(newStatus);
        mnuDBSetup.setEnabled(newStatus);
        mnuSetup.setEnabled(newStatus);
    }
    private void btnClearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearLogActionPerformed
        lstLogModel.clear();
    }//GEN-LAST:event_btnClearLogActionPerformed

    private void mnuDBSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDBSetupActionPerformed
        new DataBaseConfigurator(this, true).setVisible(true);
    }//GEN-LAST:event_mnuDBSetupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//System.out.println(DBController.getCompanyController().findCompanyInfo("1171").getName());

        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookingGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookingGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookingGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookingGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BookingGenerator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearLog;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGenerate;
    private javax.swing.ButtonGroup grpRadioButtons;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstCompanies;
    private javax.swing.JList lstLog;
    private javax.swing.JMenuItem mnuDBSetup;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuSetup;
    private javax.swing.JScrollPane pnlContainer;
    private javax.swing.JRadioButton rbtnCombined;
    private javax.swing.JRadioButton rbtnForSelection;
    private javax.swing.JRadioButton rbtnSingleFile;
    private javax.swing.JTextField txtInputFolder;
    private javax.swing.JTextField txtOutputFolder;
    private javax.swing.JTextField txtProcessedFolder;
    // End of variables declaration//GEN-END:variables

    private void close() {
        /*  if(!BookingCreator.runningThreads.isEmpty())
         {
         JOptionPane.showMessageDialog(this, "You can't exit before logs insertion", "Unable to exit",JOptionPane.ERROR_MESSAGE);
         return;
         }*/
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Exit", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            System.exit(0);
        }
    }
    File inputFolder = null;
    Thread watcherThread = null;

    private void startWatching() {
        watcherThread = new Thread() {
            @Override
            public void run() {
                while (true) {
                    if (!updatingPaths) {
                        SwingUtilities.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                watchInputFolder();
                            }
                        });

                    }
                    try {
                        sleep(500);
                    } catch (InterruptedException ex) {
                    }
                }
            }
        };
        watcherThread.start();
        /* new Thread(){

         @Override
         public void run() {
         while(true)
         {
         if(watcherThread.isAlive()) {
         try {
         sleep(500);
         } catch (InterruptedException ex) {
                           
         }
         }
         else {
         watcherThread.start();
         }
         }
         }
           
         }.start();*/
    }

    public void watchInputFolder() {
        try {
            lstModel.diffElements(inputFolder.listFiles());
            lstCompanies.validate();
        } catch (Exception e) {
        }
    }

    private void loadConfigs() {
        Properties configs = Configs.loadConfigurations(Configs.CONFIG_FILE_NAME);
        if (configs != null) {
            txtInputFolder.setText(configs.getProperty(Configs.INPUT_FOLDER_KEY));
            inputFolder = new File(txtInputFolder.getText());
            txtProcessedFolder.setText(configs.getProperty(Configs.PROCESSED_FOLDER_KEY));
            txtOutputFolder.setText(configs.getProperty(Configs.OUTPUT_FOLDER_KEY));
        }
    }
}
